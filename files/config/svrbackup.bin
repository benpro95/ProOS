#!/bin/bash
############################################
#### Server Backup Program #################
# (do not run standalone, svrutil runs this)

## Time to wait for PVE action timer
wait_time=65 # seconds

#### 256GB Drives ####
USB256DRV1="usb256-01"
USB256DRV2="usb256-02"
USB256DRV3=""
USB256DRV4=""
#### 128GB Drives ####
USB128DRV1="usb128-01"
USB128DRV2="usb128-02"
USB128DRV3=""
USB128DRV4=""
#### 4TB Drives ####
HDDRV1="hdd4tb-01"
HDDRV2="hdd4tb-02"
HDDRV3="hdd4tb-03"
HDDRV4=""

### Lock file
if [ -f "/tmp/backupsvr.lock" ]; then
  echo "already running!"
  echo "run 'svrutil rmlock' to manually remove lock if program failed"
  ENDPGRM
else
  touch /tmp/backupsvr.lock
fi

echo "starting backup..."
echo " "
echo "***************************************************"
echo "press ctrl+a then ctrl+d to detach terminal"
echo "run 'screen -r' to reattach to this terminal"
echo "***************************************************"
echo " "
if [[ "$CHECKSUM" == "--checksum" ]]
then
  echo "checksum compare option selected, this backup will take awhile!"
  echo " "
fi

###################################
###################################
## 256GB Backup Drives Loop #######
for ((i=1; i<5; i++))
do
  USB256VAR="USB256DRV$i"
  if [ "${!USB256VAR}" = "" ] ; then
    echo "no drive specified."
    echo " "
  else
    if [ ! -e /mnt/extbkps/${!USB256VAR}/Ben ] ; then
      echo "drive not connected ${!USB256VAR}"
      echo " "
    else
      ##### BEGIN BACKUP #####
      #### Ben Share ####
      if [ ! -e /mnt/datastore/Ben/ProOS ]; then
        echo "//files/Ben not connected."
      else
        echo "syncing 'Ben' share to ${!USB256VAR} drive..."
        rsync --progress $CHECKSUM -aP --exclude="Software/WindowsImageBackup/z97mx/Backup**" \
        --exclude='Software/Nintendo' --exclude='Software/Playstation' --exclude='Software/**.ipsw' \
        --exclude='Software/**VM.zip' --exclude='Software/**HD.zip' --exclude='Software/**HD.7z' \
        /mnt/datastore/Ben/ /mnt/extbkps/${!USB256VAR}/Ben/ -delete --delete-excluded
      fi
      #### Archive Share ####
      if [ ! -e /mnt/datastore/.Archive/Videos ]; then
        echo "//files/Archive not connected."
      else
        echo "syncing 'Archive' share to ${!USB256VAR} drive..."
        rsync --progress -aP --exclude="Movies/" \
        /mnt/datastore/.Archive/ /mnt/extbkps/${!USB256VAR}/.Archive/ -delete --delete-excluded
      fi
      #### Media Share ####
      if [ ! -e /mnt/datastore/Media/Music ]; then
        echo "//files/Media not connected."
      else
        echo "syncing 'Media' share to ${!USB256VAR} drive..."
        rsync --progress -aP --exclude="Movies/" --exclude="Music/" --exclude="TV Shows/" \
        /mnt/datastore/Media/ /mnt/extbkps/${!USB256VAR}/Media/ -delete --delete-excluded
      fi
      ##### END BACKUP #####
    fi
  fi  
done
###################################
###################################
## 128GB Backup Drives Loop #######
for ((i=1; i<5; i++))
do
  USB128VAR="USB128DRV$i"
  if [ "${!USB128VAR}" = "" ] ; then
    echo "no drive specified."
    echo " "
  else
    if [ ! -e /mnt/extbkps/${!USB128VAR}/Ben ]; then
      echo "drive not connected ${!USB128VAR}"
      echo " "
    else
      ##### BEGIN BACKUP #####
      #### Ben Share ####
      if [ ! -e /mnt/datastore/Ben/ProOS ]; then
        echo "//files/Ben not connected."
      else
        echo "syncing 'Ben' share to ${!USB128VAR} drive..."
        rsync --progress $CHECKSUM -aP --exclude="Software/WindowsImageBackup/z97mx/Backup**" \
        --exclude='Software/Nintendo' --exclude='Software/Playstation' --exclude='Software/**.ipsw' \
        --exclude='Software/**.img' --exclude='Software/**.iso'  --exclude='Software/**HD.zip' --exclude='Software/**HD.7z' \
        --exclude='Software/**VM.zip' --exclude='Software/**USB.zip' --exclude='Documents/Family/Media-**.zip' \
        /mnt/datastore/Ben/ /mnt/extbkps/${!USB128VAR}/Ben/ -delete --delete-excluded
      fi
      #### Archive Share ####
      if [ ! -e /mnt/datastore/.Archive/Videos ]; then
        echo "//files/Archive not connected."
      else
        echo "syncing 'Archive' share to ${!USB128VAR} drive..."
        rsync --progress -aP --exclude="Movies/" \
        /mnt/datastore/.Archive/ /mnt/extbkps/${!USB128VAR}/.Archive/ -delete --delete-excluded
      fi
      ##### END BACKUP #####
    fi
  fi  
done
###################################
###################################
## Hard Disk Backup Drives Loop ###
for ((i=1; i<5; i++))
do
  HDDVAR="HDDRV$i"
  if [ "${!HDDVAR}" = "" ] ; then
    echo "no drive specified."
    echo " "
  else
    if [ ! -e /mnt/extbkps/${!HDDVAR}/Ben ]; then
      echo "drive not connected ${!HDDVAR}"
      echo " "
    else
      ##### BEGIN BACKUP #####
      #### Ben Share ####
      if [ ! -e /mnt/datastore/Ben/ProOS ]; then
        echo "//files/Ben not connected."
      else
        echo "syncing 'Ben' share to ${!HDDVAR} drive..."
        rsync --progress $CHECKSUM -aP /mnt/datastore/Ben/ /mnt/extbkps/${!HDDVAR}/Ben/ -delete --delete-excluded
      fi
      #### Archive Share ####
      if [ ! -e /mnt/datastore/.Archive/Videos ]; then
        echo "//files/Archive not connected."
      else
        echo "syncing 'Archive' share to ${!HDDVAR} drive..."
        rsync --progress -aP /mnt/datastore/.Archive/ /mnt/extbkps/${!HDDVAR}/.Archive/ -delete --delete-excluded
      fi
      #### Media Share ####
      if [ ! -e /mnt/datastore/Media/Music ]; then
        echo "//files/Media not connected."
      else
        echo "syncing 'Media' share to ${!HDDVAR} drive..."
        rsync --progress -aP /mnt/datastore/Media/ /mnt/extbkps/${!HDDVAR}/Media/ -delete --delete-excluded
      fi
      ##### END BACKUP #####
    fi
  fi  
done

################################
## Wait for drives to settle after backup complete
temp_cnt=${wait_time}
while [[ ${temp_cnt} -gt 0 ]];
do
  printf "\rtriggering drive detach in %2d second(s)." ${temp_cnt}
  sleep 1
  ((temp_cnt--))
done
touch /mnt/extbkps/keytmp/unmount.txt
## Unlock State File
rm -f /tmp/backupsvr.lock
## Wait for drives to detach
temp_cnt=${wait_time}
while [[ ${temp_cnt} -gt 0 ]];
do
  printf "\rwait %2d second(s) for drives to detach." ${temp_cnt}
  sleep 1
  ((temp_cnt--))
done
## Print drives status
cat /mnt/extbkps/keytmp/status.txt
REPLY=""
read -p "re-check drives status (s) or enter to skip: " -n 1 -r
echo
if [[ $REPLY =~ ^[Ss]$ ]]
then
  cat /mnt/extbkps/keytmp/status.txt
fi
