#!/bin/bash
#######################
#### PVE Main Menu ####
#######################
#######################

## End Session Function
ENDPGRM () {
echo " "
REPLY=""
read -p "select (s) for command shell or (enter) to return: " -n 1 -r
echo
clear
if [[ $REPLY =~ ^[Ss]$ ]]
then
  exit
else
  MAINPGRM
fi
}

## Main Function
MAINPGRM () {

#### 256GB Drives ####
USB256DRV1="usb256-01"
USB256DRV2=""
USB256DRV3=""
USB256DRV4=""
#### 128GB Drives ####
USB128DRV1="usb128-01"
USB128DRV2="usb128-02"
USB128DRV3="usb128-03"
USB128DRV4=""
#### 4TB Drives ####
HDDRV1="hdd4tb-01"
HDDRV2="hdd4tb-02"
HDDRV3="hdd4tb-03"
HDDRV4=""

uname -m -n -s -o -r
echo " "
echo "    ____             ____  _____"
echo "   / __ \_________  / __ \/ ___/"
echo "  / /_/ / ___/ __ \/ / / /\__ \ "
echo " / ____/ /  / /_/ / /_/ /___/ / "
echo "/_/   /_/   \____/\____//____/  "
echo " "
echo "by Ben Provenzano III"
echo " "
echo "last login:"
lastlog -u server
echo " "
echo "(l) list drive usage"
echo "(g) generate a server log"
echo "(v) start / stop a virtual machine"
echo "(b) allow access to backup snapshots"
echo "(r) remove access to backup snapshots"
echo "(m) mount / backup to external drives"
echo "(d) detach external drives"
echo "(enter) command shell"
echo " "

read -p "select mode: " -n 1 -r
echo

## List drive usage
if [[ $REPLY =~ ^[Ll]$ ]]
then
echo "drive usage for file server."
echo ""
df -h
ENDPGRM
fi

## Generate log file
if [[ $REPLY =~ ^[Gg]$ ]]
then
touch /mnt/extbkps/keytmp/createlog.txt
echo " "
echo "Wait one-minute, server log will be created at"
echo "SMB: \\files\Downloads\Server.log"
ENDPGRM
fi

if [[ $REPLY =~ ^[Vv]$ ]]
then
  echo " "	
  echo "(x) Xana - 10.177.1.3"
  echo "(u) Unifi - 10.177.1.13 "
  REPLY=""
  read -p "select VM: " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Xx]$ ]]
  then
  VMHOST="xana"
  fi
  ##
  if [[ $REPLY =~ ^[Uu]$ ]]
  then
  VMHOST="unifi"
  fi
  ##
  if [[ ! $VMHOST = "" ]]
  then
    echo " "
    echo "$VMHOST selected."
    REPLY=""
    read -p "select (b) to boot or (s) to shutdown: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Bb]$ ]]
    then
     touch /mnt/extbkps/keytmp/start$VMHOST.txt
     echo "waiting one-minute for startup to trigger..."
     sleep 60
     cat /mnt/extbkps/keytmp/vmlog.txt
    fi
    if [[ $REPLY =~ ^[Ss]$ ]]
    then
     echo "stopping $VMHOST virtual machine..."
     ssh -t -i ~/ProOS/$VMHOST/id_rsa root@$VMHOST "shutdown -h now"
    fi
  fi
ENDPGRM
fi  

## Snapshot Share Access
if [[ $REPLY =~ ^[Bb]$ ]]
then
echo " "
if [ -e "/mnt/backup/Snapshots" ]; then
  echo "already attached!"  	
else
  echo "attaching share..."
  ln -s /mnt/datastore/.zfs/snapshot /mnt/backup/Snapshots
fi
ENDPGRM
fi

## Archive Share Access
if [[ $REPLY =~ ^[Aa]$ ]]
then
echo " "
if [ -e "/mnt/backup/Archive" ]; then
  echo "already attached!"  	
else
  echo "attaching share..."
  ln -s /mnt/datastore/.Archive /mnt/backup/Archive
fi
ENDPGRM
fi

## Remove Share Access
if [[ $REPLY =~ ^[Rr]$ ]]
then
echo " "
echo "detaching shares..."
rm -fv /mnt/backup/Snapshots
rm -fv /mnt/backup/Archive
ENDPGRM
fi

##### BEGIN BACKUP SECTION #####
################################
SERVERBKP="" 
## Only detach drives
if [[ $REPLY =~ ^[Dd]$ ]]
then
  echo "detaching backup disks..."
  touch /mnt/extbkps/keytmp/unmount.txt
  echo "waiting one-minute for drives to detach..."
  sleep 60
  cat /mnt/extbkps/keytmp/status.txt
  ENDPGRM
fi
##
## Unlock / Backup
if [[ $REPLY =~ ^[Mm]$ ]]
then
  echo " "
  SERVERBKP="end" 
  REPLY=""
  read -p "unlock backup drives (y/n): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo " "
    ## Read password then mount drives  
    rm -f /mnt/extbkps/keytmp/pass.txt
    read -s -p "enter backup password: " KEYVAR
    echo "$KEYVAR" >> /mnt/extbkps/keytmp/pass.txt
    KEYVAR=000000000000000000000
    echo " "
    echo "waiting one-minute for drives to mount..."
    sleep 65
  fi
  ## Backup Drives Status
  cat /mnt/extbkps/keytmp/status.txt
  echo " "
  echo "(b) start standard backup"
  echo "(c) start checksum compare backup"
  echo "(s) re-check drives status"
  echo "(enter) exit backup program"
  REPLY=""
  read -p "enter option: " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Ss]$ ]]
  then
    cat /mnt/extbkps/keytmp/status.txt
    echo " "
    echo "(b) start standard backup"
    echo "(c) start checksum compare backup"
    echo "(enter) exit backup program"
    REPLY=""
    read -p "enter option: " -n 1 -r
    echo
  fi
  ##
  if [[ $REPLY =~ ^[Bb]$ ]]
  then
    echo " "
    CHECKSUM=""
    SERVERBKP="start" 
  fi
  ##
  if [[ $REPLY =~ ^[Cc]$ ]]
  then
    echo " "
    SERVERBKP="start"
    CHECKSUM="--checksum"
  fi
fi
##
#######################################################
###### BACKUP SECTION ######
if [[ $SERVERBKP == "end" ]]; then
  ENDPGRM
fi
if [[ $SERVERBKP == "start" ]]; then
### Lock file
if [ -f "/tmp/backupsvr.lock" ]; then
  echo "already running!"
  echo "run 'backupsvr rmlock' to manually remove lock if program failed"
  ENDPGRM
else
  touch /tmp/backupsvr.lock
fi
##
echo "starting backup..."
echo "***************************************************"
echo "press ctrl+a then ctrl+d to detach terminal"
echo "run 'screen -r' to reattach to this terminal"
echo "***************************************************"
if [[ "$CHECKSUM" == "--checksum" ]]
then
  echo "checksum compare option selected, this backup will take awhile!"
fi  
###################################
###################################
## 256GB Backup Drives Loop #######
for ((i=1; i<5; i++))
do
  USB256VAR="USB256DRV$i"
  if [ "${!USB256VAR}" = "" ] ; then
    echo "no drive specified."
    echo " "
  else
    if [ ! -e /mnt/extbkps/${!USB256VAR}/Ben ] ; then
      echo "drive not connected ${!USB256VAR}"
      echo " "
    else
      ##### BEGIN BACKUP #####
      #### Ben Share ####
      if [ ! -e /mnt/datastore/Ben/ProOS ]; then
        echo "//files/Ben not connected."
      else
        echo "syncing 'Ben' share to ${!USB256VAR} drive..."
        rsync --progress $CHECKSUM -aP --exclude="Software/WindowsImageBackup/z97mx/Backup**" \
        --exclude='Software/Nintendo' --exclude='Software/Playstation' --exclude='Software/**.ipsw' \
        --exclude='Software/**VM.zip' --exclude='Software/**HD.zip' --exclude='Software/**HD.7z' \
        /mnt/datastore/Ben/ /mnt/extbkps/${!USB256VAR}/Ben/ -delete --delete-excluded
      fi
      #### Archive Share ####
      if [ ! -e /mnt/datastore/.Archive/Saved ]; then
        echo "//files/Archive not connected."
      else
        echo "syncing 'Archive' share to ${!USB256VAR} drive..."
        rsync --progress -aP --exclude="Movies/" \
        /mnt/datastore/.Archive/ /mnt/extbkps/${!USB256VAR}/.Archive/ -delete --delete-excluded
      fi
      #### Media Share ####
      if [ ! -e /mnt/datastore/Media/Music ]; then
        echo "//files/Media not connected."
      else
        echo "syncing 'Media' share to ${!USB256VAR} drive..."
        rsync --progress -aP --exclude="Movies/" --exclude="Music/" --exclude="TV Shows/" \
        /mnt/datastore/Media/ /mnt/extbkps/${!USB256VAR}/Media/ -delete --delete-excluded
      fi
      ##### END BACKUP #####
    fi
  fi  
done
###################################
###################################
## 128GB Backup Drives Loop #######
for ((i=1; i<5; i++))
do
  USB128VAR="USB128DRV$i"
  if [ "${!USB128VAR}" = "" ] ; then
    echo "no drive specified."
    echo " "
  else
    if [ ! -e /mnt/extbkps/${!USB128VAR}/Ben ]; then
      echo "drive not connected ${!USB128VAR}"
      echo " "
    else
      ##### BEGIN BACKUP #####
      #### Ben Share ####
      if [ ! -e /mnt/datastore/Ben/ProOS ]; then
        echo "//files/Ben not connected."
      else
        echo "syncing 'Ben' share to ${!USB128VAR} drive..."
        rsync --progress $CHECKSUM -aP --exclude="Software/WindowsImageBackup/z97mx/Backup**" \
        --exclude='Software/Nintendo' --exclude='Software/Playstation' --exclude='Software/**.ipsw' \
        --exclude='Software/**.img' --exclude='Software/**.iso'  --exclude='Software/**HD.zip' --exclude='Software/**HD.7z' \
        --exclude='Software/**VM.zip' --exclude='Software/**USB.zip' --exclude='Documents/Family/Media-**.zip' \
        /mnt/datastore/Ben/ /mnt/extbkps/${!USB128VAR}/Ben/ -delete --delete-excluded
      fi
      #### Archive Share ####
      if [ ! -e /mnt/datastore/.Archive/Saved ]; then
        echo "//files/Archive not connected."
      else
        echo "syncing 'Archive' share to ${!USB128VAR} drive..."
        rsync --progress -aP --exclude="Movies/" \
        /mnt/datastore/.Archive/ /mnt/extbkps/${!USB128VAR}/.Archive/ -delete --delete-excluded
      fi
      ##### END BACKUP #####
    fi
  fi  
done
###################################
###################################
## Hard Disk Backup Drives Loop ###
for ((i=1; i<5; i++))
do
  HDDVAR="HDDRV$i"
  if [ "${!HDDVAR}" = "" ] ; then
    echo "no drive specified."
    echo " "
  else
    if [ ! -e /mnt/extbkps/${!HDDVAR}/Ben ]; then
      echo "drive not connected ${!HDDVAR}"
      echo " "
    else
      ##### BEGIN BACKUP #####
      #### Ben Share ####
      if [ ! -e /mnt/datastore/Ben/ProOS ]; then
        echo "//files/Ben not connected."
      else
        echo "syncing 'Ben' share to ${!HDDVAR} drive..."
        rsync --progress $CHECKSUM -aP /mnt/datastore/Ben/ /mnt/extbkps/${!HDDVAR}/Ben/ -delete --delete-excluded
      fi
      #### Archive Share ####
      if [ ! -e /mnt/datastore/.Archive/Saved ]; then
        echo "//files/Archive not connected."
      else
        echo "syncing 'Archive' share to ${!HDDVAR} drive..."
        rsync --progress -aP /mnt/datastore/.Archive/ /mnt/extbkps/${!HDDVAR}/.Archive/ -delete --delete-excluded
      fi
      #### Media Share ####
      if [ ! -e /mnt/datastore/Media/Music ]; then
        echo "//files/Media not connected."
      else
        echo "syncing 'Media' share to ${!HDDVAR} drive..."
        rsync --progress -aP /mnt/datastore/Media/ /mnt/extbkps/${!HDDVAR}/Media/ -delete --delete-excluded
      fi
      ##### END BACKUP #####
    fi
  fi  
done
################################
################################
echo "detaching backup disks..."
touch /mnt/extbkps/keytmp/unmount.txt
## Unlock State File
rm -f /tmp/backupsvr.lock
echo "waiting one-minute for drives to detach..."
sleep 65
cat /mnt/extbkps/keytmp/status.txt
REPLY=""
read -p "re-check drives status (s) or enter to skip: " -n 1 -r
echo
if [[ $REPLY =~ ^[Ss]$ ]]
then
  cat /mnt/extbkps/keytmp/status.txt
fi
ENDPGRM
fi
##### END BACKUP SECTION #####

##### END MAIN FUNCTION #####
}
#### BEGIN MAIN SCRIPT #####
############################
### Only run if server user
if [ ! "$USER" = server ]; then
    echo "this script should only be ran by server user, aborting."
    exit 1
fi
############################
### Backup Drive Status
if [ "$1" = "bkpstatus" ] ; then
cat /mnt/extbkps/keytmp/status.txt
echo " "
exit
fi
### Force Quit
if [ "$1" = "kill" ] ; then
/usr/bin/pkill svrutil.bin
rm -f /tmp/backupsvr.lock
echo "removed lockfile."
exit
fi
if [ "$1" = "quit" ] ; then
/usr/bin/pkill svrutil.bin
rm -f /tmp/backupsvr.lock
echo "removed lockfile."
exit
fi
############################
### Remove Lock Manually
if [ "$1" = "rmlock" ] ; then
rm -f /tmp/backupsvr.lock
echo "removed lockfile."
exit
fi
MAINPGRM
#### END MAIN SCRIPT #####
exit