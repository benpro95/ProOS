#!/bin/bash
###########################################################
## LEDwall main script by Ben Provenzano III v8 ###########
###########################################################
###########################################################

## Arduino's Serial Port
ARDUINO_PORT="ttyUSB0"

## Read Command-Line Arguments
ARG1=$1
ARG2=$2

ZTERM_COM() {
  local CMD_DATA="$1"
  /opt/rpi/singleton.sh ZTERM_PROC /usr/bin/ztermcom $CMD_DATA
}

case "$1" in

boot)
## External Serial COM
ln -sf /dev/$ARDUINO_PORT /dev/zterm-tty
ZTERM_COM "i"
## WiFi Toggle Switch
systemctl start rpi-wifiswitch
## LED Controller
/opt/rpi/leds fc norm
## Flash LED
/usr/bin/python3 - <<END
import time
import RPi.GPIO as GPIO
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO_PIN = 12
GPIO.setup(GPIO_PIN, GPIO.OUT)
GPIO.output(GPIO_PIN, True)
time.sleep(0.5)
GPIO.output(GPIO_PIN, False)
GPIO.cleanup()
quit()
END
exit
;;

apdled-on)
## Turn WiFi LED On
/usr/bin/python3 - <<END
import RPi.GPIO as GPIO
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO_PIN = 26
GPIO.setup(GPIO_PIN, GPIO.OUT)
GPIO.output(GPIO_PIN, True)
quit()
END
exit
;;

apdled-off)
## Turn WiFi LED Off
/usr/bin/python3 - <<END
import RPi.GPIO as GPIO
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO_PIN = 26
GPIO.setup(GPIO_PIN, GPIO.OUT)
GPIO.output(GPIO_PIN, False)
GPIO.cleanup()
quit()
END
exit
;;

whtledon)
## White Front LED On
touch /tmp/whtled.save
/usr/bin/python3 - <<END
import RPi.GPIO as GPIO
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO_PIN = 12
GPIO.setup(GPIO_PIN, GPIO.OUT)
GPIO.output(GPIO_PIN, True)
quit()
END
exit
;;

whtledoff)
## White Front LED Off
rm -f /tmp/whtled.save
/usr/bin/python3 - <<END
import RPi.GPIO as GPIO
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO_PIN = 12
GPIO.setup(GPIO_PIN, GPIO.OUT)
GPIO.output(GPIO_PIN, False)
GPIO.cleanup()
quit()
END
exit
;;

whtled)
## White Front LED Toggle
if [ -e /tmp/whtled.save ]; then
rm -f /tmp/whtled.save
/usr/bin/python3 - <<END
import RPi.GPIO as GPIO
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO_PIN = 12
GPIO.setup(GPIO_PIN, GPIO.OUT)
GPIO.output(GPIO_PIN, False)
GPIO.cleanup()
quit()
END
else
/usr/bin/python3 - <<END
import RPi.GPIO as GPIO
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO_PIN = 12
GPIO.setup(GPIO_PIN, GPIO.OUT)
GPIO.output(GPIO_PIN, True)
quit()
END
fi
exit
;;

## Pass command to external serial port
extcom)
ZTERM_COM "$ARG2"
exit
;;

serialmon)
/opt/rpi/arduino-cli monitor -p /dev/$ARDUINO_PORT \
  -b arduino:avr:uno --config 9600
exit
;;

update-fw)
## Update Arduino over USB
rm -rf /opt/fw-build
mkdir -p /opt/fw-build
arduino-cli -v compile --fqbn arduino:avr:uno \
  /opt/rpi/AutomateHub_2/AutomateHub_2.ino --build-path /opt/fw-build
arduino-cli -v upload -p /dev/$ARDUINO_PORT \
  --fqbn arduino:avr:uno --input-dir /opt/fw-build
LOCALCOM "i"
exit
;;
	    
    *)
        if [ "$ARG1" == "" ]; then
          echo "Enter valid command."
        else  
	      if [ "$ARG2" == "" ]; then
	        echo "Sending $ARG1 command..."
	      else
	      	echo "Sending $ARG1:$ARG2 command..."
	      fi  
	      /opt/rpi/leds "$ARG1" "$ARG2" 
	    fi
      exit
     ;;
    esac
