#!/bin/bash
############################################
#### Server Backup Program #################
# (do not run standalone, svrutil runs this)

## Time to wait for PVE action timer
## read from first command line argument
wait_time=$1
## read from second command line argument
chksum=$2

#### 256GB Drives ####
USB256DRV1="usb256-01"
USB256DRV2="usb256-02"
USB256DRV3="usb256-03"
USB256DRV4="usb256-04"
USB256DRV5="usb256-05"
USB256DRV6="usb256-06" ## not used
#### 4TB Drives ####
HDDRV1="hdd4tb-01"
HDDRV2="hdd4tb-02"
HDDRV3="hdd4tb-03"
HDDRV4="hdd4tb-04"
HDDRV5="hdd4tb-05"
HDDRV6="hdd4tb-06" ## Not used

### Lock file
if [ -f "/tmp/backupsvr.lock" ]; then
  echo "already running!"
  echo "run 'svrutil rmlock' to manually remove lock if program failed"
  exit
else
  touch /tmp/backupsvr.lock
fi

echo "starting backup..."
echo " "
echo "***************************************************"
echo "press ctrl+a then ctrl+d to detach terminal"
echo "run 'screen -r' to reattach to this terminal"
echo "***************************************************"
echo " "

## Turn on LED
/usr/bin/curl --silent --fail --ipv4 --no-buffer --max-time 5 \
 --retry 3 --retry-all-errors --retry-delay 1 --no-keepalive \
 --url "http://ledwall.home:9300/exec.php?var=&arg=whtledon&action=main"

if [[ "$chksum" == "yes" ]]
then
  echo "checksum compare option selected, this backup will take awhile!"
  echo " "
  CHECKSUM="--checksum"
fi

###################################
###################################
## 256GB Backup ###################
for ((i=1; i<7; i++))
do
  USB256VAR="USB256DRV$i"
  if [ ! "${!USB256VAR}" = "" ] ; then
    #################################
    if [ ! -e /mnt/extbkps/${!USB256VAR}/Ben ] ; then
      echo "drive not connected ${!USB256VAR}"
    else
      ##### BEGIN BACKUP #####
      if [ -e /mnt/extbkps/${!USB256VAR}/Ben/LastSynced.txt ]; then
        LASTSYNC=$(date -r /mnt/extbkps/${!USB256VAR}/Ben/LastSynced.txt -R)
        echo "*** drive ${!USB256VAR} last synced on $LASTSYNC ***"
      fi  
      #### Ben Share ####
      if [ ! -e /mnt/ben/ProOS ]; then
        echo "Ben folder not found!"
      else
        echo "syncing 'Ben' share to ${!USB256VAR} drive..."
        rsync --progress $CHECKSUM -aP \
        --exclude="Software/Workstation/**.adi" --exclude='Software/Playstation' \
        --exclude='Software/**VM.zip' --exclude='Software/**HD.zip' --exclude='Software/**HD.7z' \
        /mnt/ben/ /mnt/extbkps/${!USB256VAR}/Ben/ -delete --delete-excluded
      fi
      #### Regions Share ####
      if [ ! -e /mnt/.regions/Private ]; then
        echo "Regions folder not found!"
      else
        echo "syncing 'Regions' share to ${!USB256VAR} drive..."
        rsync --progress $CHECKSUM -aP --exclude="Public/Movies/" \
        /mnt/.regions/ /mnt/extbkps/${!USB256VAR}/.Regions/ -delete --delete-excluded
      fi
      #### Media Share ####
      if [ ! -e /mnt/media/Music ]; then
        echo "Media folder not found!"
      else
        echo "syncing 'Media' share to ${!USB256VAR} drive..."
        rsync --progress -aP --exclude="Movies/" --exclude="Music/" --exclude="TV Shows/" \
        /mnt/media/ /mnt/extbkps/${!USB256VAR}/Media/ -delete --delete-excluded
      fi
      ##### END BACKUP #####
      touch /mnt/extbkps/${!USB256VAR}/Ben/LastSynced.txt
    fi
    echo " " 
  fi  
done
###################################
###################################
## Hard Disk Backup ###############
for ((i=1; i<7; i++))
do
  HDDVAR="HDDRV$i"
  if [ ! "${!HDDVAR}" = "" ] ; then
    #################################
    if [ ! -e /mnt/extbkps/${!HDDVAR}/Ben ]; then
      echo "drive not connected ${!HDDVAR}"
    else
      ##### BEGIN BACKUP #####
      if [ -e /mnt/extbkps/${!HDDVAR}/Ben/LastSynced.txt ]; then
        LASTSYNC=$(date -r /mnt/extbkps/${!HDDVAR}/Ben/LastSynced.txt -R)
        echo "*** drive ${!HDDVAR} last synced on $LASTSYNC ***"
      fi        
      #### Ben Share ####
      if [ ! -e /mnt/ben/ProOS ]; then
        echo "Ben folder not found!"
      else
        echo "syncing 'Ben' share to ${!HDDVAR} drive..."
        rsync --progress $CHECKSUM -aP \
        /mnt/ben/ /mnt/extbkps/${!HDDVAR}/Ben/ -delete --delete-excluded
      fi
      #### Regions Share ####
      if [ ! -e /mnt/.regions/Private ]; then
        echo "Regions folder not found!"
      else
        echo "syncing 'Regions' share to ${!HDDVAR} drive..."
        rsync --progress $CHECKSUM -aP \
        /mnt/.regions/ /mnt/extbkps/${!HDDVAR}/.Regions/ -delete --delete-excluded
      fi
      #### Media Share ####
      if [ ! -e /mnt/media/Music ]; then
        echo "Media folder not found!"
      else
        echo "syncing 'Media' share to ${!HDDVAR} drive..."
        rsync --progress -aP /mnt/media/ /mnt/extbkps/${!HDDVAR}/Media/ -delete --delete-excluded
      fi
      ##### END BACKUP #####
      touch /mnt/extbkps/${!HDDVAR}/Ben/LastSynced.txt 
    fi
    echo " "     
  fi  
done

################################
## Wait for drives to settle after backup complete
temp_cnt=${wait_time}
while [[ ${temp_cnt} -gt 0 ]];
do
  printf "\rtriggering drive detach in %2d second(s)." ${temp_cnt}
  sleep 1
  ((temp_cnt--))
done

## Write drive detach trigger file
touch /mnt/extbkps/keytmp/unmount.txt
## Unlock State File
rm -f /tmp/backupsvr.lock

## Wait for drives to detach
temp_cnt=${wait_time}
while [[ ${temp_cnt} -gt 0 ]];
do
  printf "\rwait %2d second(s) for drives to detach." ${temp_cnt}
  sleep 1
  ((temp_cnt--))
done

## Turn off LED
/usr/bin/curl --silent --fail --ipv4 --no-buffer --max-time 30 \
 --retry 3 --retry-all-errors --retry-delay 1 --no-keepalive \
 --url "http://ledwall.home:9300/exec.php?var=&arg=whtledoff&action=main"

## Print drives status
cat /mnt/extbkps/keytmp/status.txt
REPLY=""
read -p "re-check drives status (s) or enter to skip: " -n 1 -r
echo
if [[ $REPLY =~ ^[Ss]$ ]]
then
  cat /mnt/extbkps/keytmp/status.txt
fi

exit