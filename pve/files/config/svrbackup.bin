#!/bin/bash
############################################
#### Server Backup Program #################
# (do not run standalone, svrutil runs this)

## Time to wait for PVE action timer
## read from first command line argument
wait_time=$1
## read from second command line argument
chksum=$2

### Lock file
if [ -f "/tmp/backupsvr.lock" ]; then
  echo "already running!"
  echo "run 'svrutil rmlock' to manually remove lock if program failed"
  exit
else
  touch /tmp/backupsvr.lock
fi

echo "starting backup..."
echo " "
echo "***************************************************"
echo "press ctrl+a then ctrl+d to detach terminal"
echo "run 'screen -r' to reattach to this terminal"
echo "***************************************************"
echo " "

## Turn on LED
/usr/bin/curl --silent --fail --ipv4 --no-buffer --max-time 5 \
 --retry 3 --retry-all-errors --retry-delay 1 --no-keepalive \
 --url "http://ledwall.home:9300/exec.php?var=&arg=whtledon&action=main"

if [[ "$chksum" == "yes" ]]
then
  echo "checksum compare option selected, this backup will take awhile!"
  echo " "
  CHECKSUM="--checksum"
fi

## Read Backup Drive Names
readarray -t ZFSPOOLS < /mnt/extbkps/drives.txt

###################################
###################################
## 256GB Backup ###################
for _USBPOOL in "${ZFSPOOLS[@]}"; do
  USBPOOL=$(echo $_USBPOOL | sed -e 's/\r//g')
  if [ ! "$USBPOOL" == "" ]; then
    if [[ ${USBPOOL::3} == "USB" ]]; then
      #################################
      if [ ! -e /mnt/extbkps/$USBPOOL/Ben ]; then
        echo "USB drive not connected $USBPOOL"
      else
        ##### BEGIN BACKUP #####
        if [ -e /mnt/extbkps/$USBPOOL/Ben/LastSynced.txt ]; then
          LASTSYNC=$(date -r /mnt/extbkps/$USBPOOL/Ben/LastSynced.txt -R)
          echo "*** USB drive $USBPOOL last synced on $LASTSYNC ***"
        fi  
        #### Ben Share ####
        if [ ! -e /mnt/ben/ProOS ]; then
          echo "Ben folder not found!"
        else
          echo "syncing 'Ben' share to $USBPOOL drive..."
          rsync --progress $CHECKSUM -aP \
          --exclude="Software/Workstation/**.adi" --exclude='Software/Playstation' \
          --exclude='Software/**VM.zip' --exclude='Software/**HD.zip' --exclude='Software/**HD.7z' \
          /mnt/ben/ /mnt/extbkps/$USBPOOL/Ben/ -delete --delete-excluded
        fi
        #### Regions Share ####
        if [ ! -e /mnt/.regions/Private ]; then
          echo "Regions folder not found!"
        else
          echo "syncing 'Regions' share to $USBPOOL drive..."
          rsync --progress $CHECKSUM -aP --exclude="Public/Movies/" \
          /mnt/.regions/ /mnt/extbkps/$USBPOOL/.Regions/ -delete --delete-excluded
        fi
        #### Media Share ####
        if [ ! -e /mnt/media/Music ]; then
          echo "Media folder not found!"
        else
          echo "syncing 'Media' share to $USBPOOL drive..."
          rsync --progress -aP --exclude="Movies/" --exclude="Music/" --exclude="TV Shows/" \
          /mnt/media/ /mnt/extbkps/$USBPOOL/Media/ -delete --delete-excluded
        fi
        ##### END BACKUP #####
        touch /mnt/extbkps/$USBPOOL/Ben/LastSynced.txt
      fi  
    fi
    echo " " 
  fi  
done
###################################
###################################
## Hard Disk Backup ###############
for _HDDPOOL in "${ZFSPOOLS[@]}"; do
  HDDPOOL=$(echo $_HDDPOOL | sed -e 's/\r//g')
  if [ ! "$HDDPOOL" == "" ]; then
    if [[ ${HDDPOOL::3} == "HDD" ]]; then
      #################################
      if [ ! -e /mnt/extbkps/$HDDPOOL/Ben ]; then
        echo "hard drive not connected $HDDPOOL"
      else
        ##### BEGIN BACKUP #####
        if [ -e /mnt/extbkps/$HDDPOOL/Ben/LastSynced.txt ]; then
          LASTSYNC=$(date -r /mnt/extbkps/$HDDPOOL/Ben/LastSynced.txt -R)
          echo "*** hard drive $HDDPOOL last synced on $LASTSYNC ***"
        fi        
        #### Ben Share ####
        if [ ! -e /mnt/ben/ProOS ]; then
          echo "Ben folder not found!"
        else
          echo "syncing 'Ben' share to $HDDPOOL drive..."
          rsync --progress $CHECKSUM -aP \
          /mnt/ben/ /mnt/extbkps/$HDDPOOL/Ben/ -delete --delete-excluded
        fi
        #### Regions Share ####
        if [ ! -e /mnt/.regions/Private ]; then
          echo "Regions folder not found!"
        else
          echo "syncing 'Regions' share to $HDDPOOL drive..."
          rsync --progress $CHECKSUM -aP \
          /mnt/.regions/ /mnt/extbkps/$HDDPOOL/.Regions/ -delete --delete-excluded
        fi
        #### Media Share ####
        if [ ! -e /mnt/media/Music ]; then
          echo "Media folder not found!"
        else
          echo "syncing 'Media' share to $HDDPOOL drive..."
          rsync --progress -aP /mnt/media/ /mnt/extbkps/$HDDPOOL/Media/ -delete --delete-excluded
        fi
        ##### END BACKUP #####
        touch /mnt/extbkps/$HDDPOOL/Ben/LastSynced.txt 
      fi
      echo " " 
    fi      
  fi  
done

################################
## Wait for drives to settle after backup complete
temp_cnt=${wait_time}
while [[ ${temp_cnt} -gt 0 ]];
do
  printf "\rtriggering drive detach in %2d second(s)." ${temp_cnt}
  sleep 1
  ((temp_cnt--))
done

## Write drive detach trigger file
touch /mnt/extbkps/keytmp/unmount.txt
## Unlock State File
rm -f /tmp/backupsvr.lock

## Wait for drives to detach
temp_cnt=${wait_time}
while [[ ${temp_cnt} -gt 0 ]];
do
  printf "\rwait %2d second(s) for drives to detach." ${temp_cnt}
  sleep 1
  ((temp_cnt--))
done

## Turn off LED
/usr/bin/curl --silent --fail --ipv4 --no-buffer --max-time 30 \
 --retry 3 --retry-all-errors --retry-delay 1 --no-keepalive \
 --url "http://ledwall.home:9300/exec.php?var=&arg=whtledoff&action=main"

## Print drives status
cat /mnt/extbkps/keytmp/status.txt
REPLY=""
read -p "re-check drives status (s) or enter to skip: " -n 1 -r
echo
if [[ $REPLY =~ ^[Ss]$ ]]
then
  cat /mnt/extbkps/keytmp/status.txt
fi

exit