#!/bin/bash
#######################
#### PVE Main Menu ####
#######################
#######################

## Time to wait for PVE action timer
wait_time=60 # seconds

##### END SESSION FUNCTION #####
ENDPGRM () {
echo " "
REPLY=""
read -p "select (s) for shell or (enter) to return: " -n 1 -r
echo
if [[ $REPLY =~ ^[Ss]$ ]]
then
  tput clear
  exit
else
  clear
  MAINPGRM
fi
###############################
}

##### BEGIN MAIN FUNCTION #####
MAINPGRM () {
uname -m -n -s -o -r
RANDOPT=$(( $RANDOM % 3 ))
if [[ $RANDOPT == "0" ]]
then
  echo " "
  echo "    ____             ____  _____"
  echo "   / __ \_________  / __ \/ ___/"
  echo "  / /_/ / ___/ __ \/ / / /\__ \ "
  echo " / ____/ /  / /_/ / /_/ /___/ / "
  echo "/_/   /_/   \____/\____//____/  "
  echo " "
fi
if [[ $RANDOPT == "1" ]]
then
  echo " "
  echo "  _____            ____   _____ "
  echo " |  __ \          / __ \ / ____|"
  echo " | |__) | __ ___ | |  | | (___  "
  echo " |  ___/ '__/ _ \| |  | |\___ \ "
  echo " | |   | | | (_) | |__| |____) |"
  echo " |_|   |_|  \___/ \____/|_____/ "
  echo " "
fi
if [[ $RANDOPT == "2" ]]
then
  echo " "
  echo " ____  ____   ___   ___   _____"
  echo "|    \|    \ /   \ /   \ / ___/"
  echo "|  o  )  D  )     |     (   \_ "
  echo "|   _/|    /|  O  |  O  |\__  |"
  echo "|  |  |    \|     |     |/  \ |"
  echo "|  |  |  .  \     |     |\    |"
  echo "|__|  |__|\_|\___/ \___/  \___|"
  echo " "
fi
echo "by Ben Provenzano III"
echo " "
echo "last login:"
lastlog -u server
echo " "
echo "(d) Drive usage"
echo "(n) Network scan"
echo "(b) Backup utility"
echo "(g) Generate a log file"
echo "(p) Push ProOS to GitHub"
echo "(s) System configuration"
echo "(enter) Exit to shell"
echo " "
read -p "select option: " -n 1 -r
echo

## Backup ProOS to GitHub
if [[ $REPLY =~ ^[pP]$ ]]
then
  TIMESTMP=$(date '+%Y-%m-%d %H:%M')
  echo "uploading changes to GitHub..."
  cd /mnt/ben/ProOS
  git add .
  git commit -m "$TIMESTMP"
  git push -u ProOS master
  cd -
  ENDPGRM
fi

## List drive usage
if [[ $REPLY =~ ^[Dd]$ ]]
then
  echo " "
  df -h
  ENDPGRM
fi

## Port scan active network devices
if [[ $REPLY =~ ^[Nn]$ ]]
then
  echo " "
  echo "scanning network..."
  nmap --unprivileged -v --open -PT 10.177.1.0/24 > /tmp/nmap.txt
  nmap --unprivileged -v --open -sn 10.177.1.0/24 >> /tmp/nmap.txt
  cat /tmp/nmap.txt
  ENDPGRM
fi

## Generate log file
if [[ $REPLY =~ ^[Gg]$ ]]
then
  touch /mnt/extbkps/keytmp/createlog.txt
  echo " "
  echo "wait one-minute, server log will be created at"
  echo "smb://files/Downloads/Server.log"
  log_wait=3 
  temp_cnt=${log_wait}
  while [[ ${temp_cnt} -gt 0 ]];
  do
    printf "\rreturning to main menu in %1d second(s)..." ${temp_cnt}
    sleep 1
    ((temp_cnt--))
  done
  clear
  MAINPGRM
fi

## Server control
if [[ $REPLY =~ ^[Ss]$ ]]
then
  echo " "
  echo "(d) detach all regions"  
  echo "(s) attach/detach snapshot region"  
  echo "(u) update automate configuration" 
  echo "(x) start/stop xana - vnc://ben@xana:5091"
  echo "(d) start/stop dev - ssh://root@dev"
  echo "(c) start/stop unifi controller"
  echo " "
  REPLY=""
  read -p "select option: " -n 1 -r
  echo
  ## Update Automate Configuration
  ##################################    
  if [[ $REPLY =~ ^[Uu]$ ]]
  then
    curl -N -f -m 5 --silent "http://ledwall.home:9300/exec.php?var=&arg=whtledon&action=main"
    echo " "
    echo "updating automate system configuration..."
    ssh -t -i ~/ProOS/.ssh/automate.rsa root@automate.home "rm -rfv /opt/rpi/remotes"
    rsync -e "ssh -i ~/ProOS/.ssh/automate.rsa" --progress --checksum -rtv ~/ProOS/pve/automate/config/system/* root@automate.home:/opt/rpi/
    echo " "
    echo "restarting lighttpd web server..."
    ssh -t -i ~/ProOS/.ssh/automate.rsa root@automate.home "systemctl restart lighttpd"
    echo " "
    echo "restarting unified remote server..."
    ssh -t -i ~/ProOS/.ssh/automate.rsa root@automate.home "systemctl restart urserver"
    curl -N -f -m 5 --silent "http://ledwall.home:9300/exec.php?var=&arg=whtledoff&action=main"
    REPLY=""
  fi
  ##################################  
  ## Start/Stop UniFi controller
  if [[ $REPLY =~ ^[Cc]$ ]]
  then
    echo " "
    ssh -t -i ~/ProOS/.ssh/automate.rsa root@automate.home "/opt/rpi/main unifi"
    REPLY=""
  fi
  ##################################
  REGROOT="/mnt/ben/Documents/Regions"
  ## Detach Regions
  if [[ $REPLY =~ ^[Dd]$ ]]
  then
    echo "detaching all regions..."
    rm -f $REGROOT/Snapshots
    rm -f $REGROOT/Private
    rm -f $REGROOT/Public
    REPLY=""  
  fi
  ## Private Share
  if [[ $REPLY =~ ^[Pp]$ ]]
  then
    echo " "
    if [ -e "$REGROOT/Private" ]; then
      echo "detaching private region..."
      rm $REGROOT/Private
    else
      echo "attaching private region..."
      ln -s /mnt/.archive/Private $REGROOT/Private
    fi
    REPLY=""  
  fi
  ##################################  
  ## Public Share
  if [[ $REPLY =~ ^[@]$ ]]
  then
    echo " "
    if [ -e "$REGROOT/Public" ]; then
      echo "detaching public region..."   
      rm $REGROOT/Public
    else
      echo "attaching public region..."
      ln -s /mnt/.archive/Public $REGROOT/Public
    fi
    REPLY=""  
  fi
  ##################################  
  ## Snapshot Share
  if [[ $REPLY =~ ^[Ss]$ ]]
  then
    echo " "
    if [ -e "$REGROOT/Snapshots" ]; then
      echo "detaching snapshots region..."
      rm $REGROOT/Snapshots
    else
      echo "attaching snapshots region..."
      ln -s /mnt/snapshots $REGROOT/Snapshots
    fi
    REPLY=""  
  fi
  ##################################  
  ## VM control (must be last in script)
  if [[ $REPLY =~ ^[Dd]$ ]]
  then
  VMHOST="dev"
  fi
  if [[ $REPLY =~ ^[Xx]$ ]]
  then
  VMHOST="xana"
  fi
  if [[ ! $VMHOST = "" ]]
  then
    echo " "
    REPLY=""
    echo "$VMHOST virtual machine selected."
    read -p "select (b) to boot or (s) to shutdown: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Bb]$ ]]
    then
     touch /mnt/extbkps/keytmp/start$VMHOST.txt
     temp_cnt=${wait_time}
     while [[ ${temp_cnt} -gt 0 ]];
     do
       printf "\rwait %2d second(s) for startup to trigger." ${temp_cnt}
       sleep 1
       ((temp_cnt--))
     done
     echo " "
     cat /mnt/extbkps/keytmp/vmlog.txt
    fi
    if [[ $REPLY =~ ^[Ss]$ ]]
    then
     echo "stopping $VMHOST virtual machine..."
     ssh -t -i ~/ProOS/.ssh/$VMHOST.rsa root@$VMHOST "shutdown -h now"
    fi
    VMHOST=""
    REPLY=""
  fi
  ##################################   
  ENDPGRM  
fi

## Backup to external drives
if [[ $REPLY =~ ^[Bb]$ ]]
then
  echo " "
  echo "##################################"
  echo "#### ProServer Backup Utility ####"
  echo "##################################"
  echo " "
  echo "(a) attach drives, start backup"
  echo "(d) detach drives only"
  echo "(enter) drives status, start backup"
  echo " "
  REPLY=""
  read -p "enter option: " -n 1 -r
  echo
  ## Just detach drives
  if [[ $REPLY =~ ^[Dd]$ ]]
  then
    echo " "
    touch /mnt/extbkps/keytmp/unmount.txt
    temp_cnt=${wait_time}
    while [[ ${temp_cnt} -gt 0 ]];
    do
      printf "\rwait %2d second(s) for drives to detach." ${temp_cnt}
      sleep 1
      ((temp_cnt--))
    done
    cat /mnt/extbkps/keytmp/status.txt
    echo " "
    REPLY=""
    read -p "(s) re-check drives status, (enter) to skip: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Ss]$ ]]
    then
      cat /mnt/extbkps/keytmp/status.txt
    fi
    ENDPGRM
  fi
  ## Read password then mount drives
  if [[ $REPLY =~ ^[Aa]$ ]]
  then
    echo " "
    rm -f /mnt/extbkps/keytmp/pass.txt
    read -s -p "enter backup password: " KEYVAR
    echo "$KEYVAR" >> /mnt/extbkps/keytmp/pass.txt
    KEYVAR=000000000000000000000
    echo " "
    temp_cnt=${wait_time}
    while [[ ${temp_cnt} -gt 0 ]];
    do
      printf "\rwait %2d second(s) for drives to mount." ${temp_cnt}
      sleep 1
      ((temp_cnt--))
    done
  fi
  ## Backup Drives Status
  cat /mnt/extbkps/keytmp/status.txt
  echo " "
  echo "(b) start standard backup"
  echo "(c) start checksum compare backup"
  echo "(s) re-check drives status"
  echo "(enter) exit backup program"
  echo " "
  REPLY=""
  read -p "enter option: " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Ss]$ ]]
  then
    cat /mnt/extbkps/keytmp/status.txt
    echo " "
    echo "(b) start standard backup"
    echo "(c) start checksum compare backup"
    echo "(enter) exit backup program"
    echo " "
    REPLY=""
    read -p "enter option: " -n 1 -r
    echo
  fi
  ##
  if [[ $REPLY =~ ^[Bb]$ ]]
  then
    echo " "
    checksum="no"
    BKPPGRM
  fi
  ##
  if [[ $REPLY =~ ^[Cc]$ ]]
  then
    echo " "
    checksum="yes"
    BKPPGRM
  fi
  ENDPGRM
fi
### runs when (enter) on main menu
tput clear
exit
##### END MAIN FUNCTION #####
}

BKPPGRM () {
##### BEGIN BACKUP FUNCTION #####
curl -N -f -m 5 --silent "http://ledwall.home:9300/exec.php?var=&arg=whtledon&action=main"
scr_num=$(echo $RANDOM) 
/usr/bin/screen -dmS $scr_num /usr/bin/svrbackup.bin $wait_time $checksum
sleep 0.25
clear
/usr/bin/screen -rS $scr_num
curl -N -f -m 5 --silent "http://ledwall.home:9300/exec.php?var=&arg=whtledoff&action=main"
##### END BACKUP FUNCTION #####
}

#### BEGIN MAIN SCRIPT #####
############################
### Only run if server user
if [ ! "$USER" = server ]; then
  echo "this script should only be ran by server user, aborting."
  exit
fi
############################
### Force Quit
if [ "$1" = "quit" ] ; then
  pkill svrutil.bin
  rm -f /tmp/backupsvr.lock
  echo "removed lockfile."
  exit
fi
############################
### Remove Lock Manually
if [ "$1" = "rmlock" ] ; then
  rm -f /tmp/backupsvr.lock
  echo "removed lockfile."
  exit
fi
clear
MAINPGRM
#### END MAIN SCRIPT #####
exit