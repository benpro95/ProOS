#!/bin/bash
## ProOS for RPi, Commands Script by Ben Provenzano III

case "$1" in

##############################################
########### SYSTEM PROGRAMS ##################

keycap)
## Capture keystrokes and events
echo "List of all known events"
thd --listevents
echo "Press Ctrl+C to exit"
/usr/sbin/thd --dump /dev/input/*
exit
;;

mon)
## System resource monitor
bpytop
exit
;;

wifistats)
## Displays realtime Wi-Fi signal stats
watch -n 1 cat /proc/net/wireless
exit
;;

active)
echo "Active services."
systemctl list-units --type=service --state=active
exit
;;

running)
echo "Running services."
systemctl list-units --type=service --state=running
exit
;;

timers)
## List active timers
systemctl list-timers --all
exit
;;

loadtimes)
## Display list of system daemons and startup times
systemd-analyze blame
exit
;;

gpu)
echo "GPU statistics."
vcdbg reloc stats
exit
;;

ftp)
## List FTP transfer command
echo 'ncftpput -R -v -u "ben" z97mx.home / local-folder'
exit
;;

xkeycap)
## List X11 keycodes 'run as user'
#keycode 162 = XF86AudioPlay
#keycode 164 = XF86AudioStop
#keycode 153 = XF86AudioNext
#keycode 144 = XF86AudioPrev
#keycode 115 = F13
#keycode 117 = F35
#keycode 234 = F19
#keycode 233 = F20
export XDG_RUNTIME_DIR=/run/user/1000
export DISPLAY=:0
/usr/bin/xev
exit
;;

ufs)
## USB file server
systemctl stop nmbd
systemctl stop smbd
rm -rf /var/cache/samba/*
rm -rf /var/log/samba/*
sleep 1.25
echo "Starting samba file server."
systemctl start nmbd
systemctl start smbd
exit
;;

restart-alsa)
## Restart ALSA audio subsystem
/etc/init.d/alsa-utils stop
alsactl kill quit
alsactl restore
/etc/init.d/alsa-utils start
exit
;;

temp)
## Read system CPU temp
tm=`vcgencmd measure_temp`
tc=`echo $tm| cut -d '=' -f2 | sed 's/..$//'`
tf=$(echo "scale=2;((9/5) * $tc) + 32" |bc)
echo temp = $tf\'F \($tc\'C\)
exit
;;

## Restart System
restart)
/usr/bin/systemctl reboot
exit
;;

reboot)
/usr/bin/systemctl reboot
exit
;;

rebroken)
echo "Removing broken APT packages..."
dpkg -l | grep ^iU | awk '{print $2}' | xargs sudo dpkg --purge 
exit
;;

overtemp)
## Over temperature action #######################
##################################################
if [ -e /tmp/pitemp.log ]; then
  rm -f /tmp/pitemp.log
fi
echo "Recording system temperature."
cpuTemp0=$(cat /sys/class/thermal/thermal_zone0/temp)
cpuTemp1=$(($cpuTemp0/1000))
cpuTemp2=$(($cpuTemp0/100))
cpuTempM=$(($cpuTemp2 % $cpuTemp1))
function writeToLog() {
 file="/tmp/pitemp.log"
 if [ ! -f "$file" ] ; then
   touch "$file"
 fi
   echo "$1" >> "$file"
}
writeToLog "$(date): CPU temp - $cpuTemp1.$cpuTempM'C;"
if [ "$cpuTemp1" -gt  "75" ] ## Temp Limit
  then writeToLog "Limiting Max Temperature..;"; `/opt/rpi/main overtemp`
fi
exit
;;

rw)
## Enable read/write mode
STRIN=$(df -h)
SUBSTR="overlay"
if [[ "$STRIN" == *"$SUBSTR"* ]]; then
  ## Overlay mode on
  echo 'Rebooting in read/write mode...'
  systemctl stop rpi-*
  OSVER="$(sed -n 's|^VERSION=".*(\(.*\))"|\1|p' /etc/os-release)"
  if [ "${OSVER}" = "bookworm" ]; then
    mount -o remount,rw /boot/firmware
  else
    # Boot partition read-only
    mount -o remount,rw /boot
  fi
  systemctl daemon-reload
  raspi-config nonint disable_overlayfs
  shutdown -r now  
else
  ## Overlay mode off   
  echo "Already in read/write mode."
fi  
exit
;;

ro)
## Enable read/only mode
STRIN=$(df -h)
SUBSTR="overlay"
if [[ "$STRIN" == *"$SUBSTR"* ]]; then
  ## Overlay mode on
  echo "Already in read/only mode."
else
  ## Overlay mode off   
  echo 'Rebooting in read/only mode...'
  systemctl stop rpi-*
  OSVER="$(sed -n 's|^VERSION=".*(\(.*\))"|\1|p' /etc/os-release)"
  if [ "${OSVER}" = "bookworm" ]; then
    mount -o remount,rw /boot/firmware
  else
    # Boot partition read-only
    mount -o remount,rw /boot
  fi
  systemctl daemon-reload
  raspi-config nonint enable_overlayfs
  shutdown -r now
fi
exit
;;

rwboot)
OSVER="$(sed -n 's|^VERSION=".*(\(.*\))"|\1|p' /etc/os-release)"
if [ "${OSVER}" = "bookworm" ]; then
  mount -o remount,rw /boot/firmware
else
  # Boot partition read-only
  mount -o remount,rw /boot
fi
systemctl daemon-reload
exit
;;

roboot)
OSVER="$(sed -n 's|^VERSION=".*(\(.*\))"|\1|p' /etc/os-release)"
if [ "${OSVER}" = "bookworm" ]; then
  mount -o remount,ro /boot/firmware
else
  # Boot partition read-only
  mount -o remount,ro /boot
fi
systemctl daemon-reload
exit
;;

update)
### System update/upgrade
echo " "
echo "System must be in read-write mode."
echo " "
df -h
read -p "Are you sure? " -n 1 -r
echo # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    exit 1
fi
OSVER="$(sed -n 's|^VERSION=".*(\(.*\))"|\1|p' /etc/os-release)"
if [ "${OSVER}" = "bookworm" ]; then
  mount -o remount,rw /boot/firmware
else
  # Boot partition read-only
  mount -o remount,rw /boot
fi
systemctl daemon-reload
apt-get -y update --allow-releaseinfo-change
apt-get upgrade
apt-get dist-upgrade
apt-get autoremove -y
apt-get clean -y
raspi-config nonint enable_overlayfs
raspi-config nonint disable_overlayfs
echo " "
echo "Re-enable read-only mode after rebooting!"
## Reboot step
read -p "Reboot now? " -n 1 -r
echo # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    exit 1
else
    reboot  
fi
exit
;;

expand)
## Expand filesystem on reboot
echo " "
echo "System must be in read-write mode."
echo " "
df -h
read -p "Are you sure? " -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    exit 1
fi
OSVER="$(sed -n 's|^VERSION=".*(\(.*\))"|\1|p' /etc/os-release)"
if [ "${OSVER}" = "bookworm" ]; then
  mount -o remount,rw /boot/firmware
else
  # Boot partition read-only
  mount -o remount,rw /boot
fi
systemctl daemon-reload
raspi-config --expand-rootfs
echo " "
echo "Re-enable read-only mode after reboot!"
## Reboot step
read -p "Reboot now? " -n 1 -r
echo # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    exit 1
else
    reboot  
fi
exit
;;

cpwifi)
echo 'Copying WiFi configuration...'
sleep 1.25
OSVER="$(sed -n 's|^VERSION=".*(\(.*\))"|\1|p' /etc/os-release)"
if [ "${OSVER}" = "bookworm" ]; then
  mount -o remount,rw /boot/firmware
else
  # Boot partition read-only
  mount -o remount,rw /boot
fi
systemctl daemon-reload
if [ "${OSVER}" = "bookworm" ]; then
  cp -f /tmp/wifidata /boot/firmware/wpa.conf
  mount -o remount,ro /boot/firmware
else
  # Boot partition read-only
  cp -f /tmp/wifidata /boot/wpa.conf
  mount -o remount,ro /boot
fi
systemctl daemon-reload
exit
;;

apdonboot)
OSVER="$(sed -n 's|^VERSION=".*(\(.*\))"|\1|p' /etc/os-release)"
if [ "${OSVER}" = "bookworm" ]; then
  mount -o remount,rw /boot/firmware
else
  # Boot partition read-only
  mount -o remount,rw /boot
fi
systemctl daemon-reload
sleep 1.25
if [ "${OSVER}" = "bookworm" ]; then
  if [ -e /boot/firmware/apd.enable ]; then
    echo 'Disabling hotspot mode on startup...'
    rm -f /boot/firmware/apd.enable
  else
    echo 'Enabling hotspot mode on startup...'
    touch /boot/firmware/apd.enable
  fi
  mount -o remount,ro /boot/firmware
else
  if [ -e /boot/apd.enable ]; then
    echo 'Disabling hotspot mode on startup...'
    rm -f /boot/apd.enable
  else
    echo 'Enabling hotspot mode on startup...'
    touch /boot/apd.enable
  fi
  # Boot partition read-only
  mount -o remount,ro /boot
fi
systemctl daemon-reload
exit
;;

netdetect)
echo "Switching to hotspot if network down."
echo "Log is written to '/tmp/netstat.txt'"
systemctl start rpi-netdetect.service
exit
;;

delwifi)
echo "Resetting Wi-Fi Settings..."
/usr/bin/screen -dm /bin/bash /etc/netmode.sh delwifi
exit
;;

client)
echo 'Enabling client network mode...'
/usr/bin/screen -dm /bin/bash /etc/netmode.sh client
exit
;;

apd)
echo 'Enabling access point mode...'
/usr/bin/screen -dm /bin/bash /etc/netmode.sh apd
exit
;;

togglenet)
## Toggle between hostspot and client mode
if pgrep -x "hostapd" > /dev/null 2> /dev/null
then
  echo "APD running, switching to client..."
  /usr/bin/screen -dm /bin/bash /etc/netmode.sh client
else
  echo "APD not running, switching to hotspot..."
  /usr/bin/screen -dm /bin/bash /etc/netmode.sh apd
fi
exit
;;

resetbt)
## Reset bluetooth connections 
for device in $(bluetoothctl devices  | grep -o "[[:xdigit:]:]\{8,17\}"); do
  echo "removing bluetooth device: $device | $(bluetoothctl remove $device)"
done
exit
;;


id)
## Capture current LED status
LEDSTATUS=$( cat /sys/class/leds/led0/trigger | grep -oP '\[\K[^][]*(?=])' )
## Flash activity LED until key is pressed
echo "Flashing activity LED... [q] to stop"
stty -echo -icanon time 0 min 0 # Don't wait when read the input
IDLOOP=1
while [ 1 ]; do
   echo -ne "$IDLOOP\r"
   ((IDLOOP+=1))
   read key
   if [ "$key" == "q" ]
   then 
      break
   fi # if [q] is hit, break the loop
   echo default-on | tee /sys/class/leds/led0/trigger &>/dev/null
   sleep 0.5
   echo none | tee /sys/class/leds/led0/trigger &>/dev/null
   sleep 0.5
done
stty sane # Come back to the classic behavior
echo "$LEDSTATUS" | tee /sys/class/leds/led0/trigger &>/dev/null
exit
;;

        *)
          echo "RPi Init Script v15"
	        echo "by Ben Provenzano III"
	        echo " "
	        echo "Enter Valid Arguments."
          echo " "
          echo "ro - Enable read/only mode"
          echo "rw - Enable read/write mode"
          echo "update - Update/upgrade system"
          echo "loadtimes - Startup services"
          echo "running - Running services"
          echo "active - Active services"
          echo "timers - Active timers"
          echo "wifistats - Wi-Fi statistics"
          echo "restart-alsa - Restart audio subsystem"
          echo "netdetect - Switch to hotspot if network down"
          echo "apdonboot - Toggle hotspot mode on startup"
          echo "togglenet - Toggle hotspot/client network"
          echo "resetbt - Clear active bluetooth connections"
          echo "ftp - List file transfer command"
          echo "gpu - GPU usage statistics"
          echo "temp - System temperature"
          echo "id - Flash activity LED"
          echo "mon - Resource monitor"
          echo " "
          exit 1
          ;;
    esac   
